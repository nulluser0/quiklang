PC:      0 | Offset:    0 | Instruction: LOADCONST           | ABx  |    1,          2 | R(1) := Kst(2) | Registers: [Null, Null, Null, Null, Null]
PC:      1 | Offset:    0 | Instruction: CALL                | Abc  |    0,    1,    0 | R(0)(#R(1)), base 0 | Registers: [Null, Int(5), Null, Null, Null]
Call Frame: CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }
Moving arg 1 a.k.a. R(1) to R(6)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }]
PC:      6 | Offset:    5 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:    5 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     10 | Offset:    5 | Instruction: SUB                 | Abc  |    5,    1, -256 | R(5) := R(1) - K(0) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     11 | Offset:    5 | Instruction: CALL                | Abc  |    0,    1,    4 | R(0)(#R(1)), base 4 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null]
Call Frame: CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }
Moving arg 1 a.k.a. R(10) to R(16)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }]
PC:      6 | Offset:   15 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   15 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     10 | Offset:   15 | Instruction: SUB                 | Abc  |    5,    1, -256 | R(5) := R(1) - K(0) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     11 | Offset:   15 | Instruction: CALL                | Abc  |    0,    1,    4 | R(0)(#R(1)), base 4 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null]
Call Frame: CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }
Moving arg 1 a.k.a. R(20) to R(26)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }, CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }]
PC:      6 | Offset:   25 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   25 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     10 | Offset:   25 | Instruction: SUB                 | Abc  |    5,    1, -256 | R(5) := R(1) - K(0) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     11 | Offset:   25 | Instruction: CALL                | Abc  |    0,    1,    4 | R(0)(#R(1)), base 4 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null]
Call Frame: CallFrame { return_pc: 11, base: 35, max_reg: 10, result_reg: 29 }
Moving arg 1 a.k.a. R(30) to R(36)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }, CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }, CallFrame { return_pc: 11, base: 35, max_reg: 10, result_reg: 29 }]
PC:      6 | Offset:   35 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   35 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     10 | Offset:   35 | Instruction: SUB                 | Abc  |    5,    1, -256 | R(5) := R(1) - K(0) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     11 | Offset:   35 | Instruction: CALL                | Abc  |    0,    1,    4 | R(0)(#R(1)), base 4 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null]
Call Frame: CallFrame { return_pc: 11, base: 45, max_reg: 10, result_reg: 39 }
Moving arg 1 a.k.a. R(40) to R(46)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }, CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }, CallFrame { return_pc: 11, base: 35, max_reg: 10, result_reg: 29 }, CallFrame { return_pc: 11, base: 45, max_reg: 10, result_reg: 39 }]
PC:      6 | Offset:   45 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Null, Int(1), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   45 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      8 | Offset:   45 | Instruction: MOVE                | Abc  |    0,    1,    0 | R(0) := R(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      9 | Offset:   45 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Int(1), Null, Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:     12 | Offset:   35 | Instruction: SUB                 | Abc  |    8,    1, -255 | R(8) := R(1) - K(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Null, Null]
PC:     13 | Offset:   35 | Instruction: CALL                | Abc  |    0,    1,    7 | R(0)(#R(1)), base 7 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null]
Call Frame: CallFrame { return_pc: 13, base: 45, max_reg: 10, result_reg: 42 }
Moving arg 1 a.k.a. R(43) to R(46)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }, CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }, CallFrame { return_pc: 11, base: 35, max_reg: 10, result_reg: 29 }, CallFrame { return_pc: 13, base: 45, max_reg: 10, result_reg: 42 }]
PC:      6 | Offset:   45 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Null, Int(0), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   45 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Null, Int(0), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      8 | Offset:   45 | Instruction: MOVE                | Abc  |    0,    1,    0 | R(0) := R(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Null, Int(0), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      9 | Offset:   45 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Int(0), Null, Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:     14 | Offset:   35 | Instruction: ADD                 | Abc  |    3,    4,    7 | R(3) := R(4) + R(7) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Int(0), Int(0), Null]
PC:     15 | Offset:   35 | Instruction: MOVE                | Abc  |    0,    3,    0 | R(0) := R(3) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Int(1), Int(1), Int(1), Null, Int(0), Int(0), Null]
PC:     16 | Offset:   35 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Int(1), Int(2), Null, Null, Int(1), Int(1), Null, Int(0), Int(0), Null]
PC:     12 | Offset:   25 | Instruction: SUB                 | Abc  |    8,    1, -255 | R(8) := R(1) - K(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Null, Null]
PC:     13 | Offset:   25 | Instruction: CALL                | Abc  |    0,    1,    7 | R(0)(#R(1)), base 7 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null]
Call Frame: CallFrame { return_pc: 13, base: 35, max_reg: 10, result_reg: 32 }
Moving arg 1 a.k.a. R(33) to R(36)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }, CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }, CallFrame { return_pc: 13, base: 35, max_reg: 10, result_reg: 32 }]
PC:      6 | Offset:   35 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null, Null, Int(1), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   35 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      8 | Offset:   35 | Instruction: MOVE                | Abc  |    0,    1,    0 | R(0) := R(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      9 | Offset:   35 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null, Int(1), Null, Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:     14 | Offset:   25 | Instruction: ADD                 | Abc  |    3,    4,    7 | R(3) := R(4) + R(7) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Int(1), Int(1), Null]
PC:     15 | Offset:   25 | Instruction: MOVE                | Abc  |    0,    3,    0 | R(0) := R(3) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Null, Int(3), Null, Int(2), Int(1), Int(2), Null, Int(1), Int(1), Null]
PC:     16 | Offset:   25 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Null, Int(3), Null, Null, Null, Null, Int(2), Int(3), Null, Null, Int(1), Int(2), Null, Int(1), Int(1), Null]
PC:     12 | Offset:   15 | Instruction: SUB                 | Abc  |    8,    1, -255 | R(8) := R(1) - K(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Null, Null]
PC:     13 | Offset:   15 | Instruction: CALL                | Abc  |    0,    1,    7 | R(0)(#R(1)), base 7 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null]
Call Frame: CallFrame { return_pc: 13, base: 25, max_reg: 10, result_reg: 22 }
Moving arg 1 a.k.a. R(23) to R(26)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }, CallFrame { return_pc: 13, base: 25, max_reg: 10, result_reg: 22 }]
PC:      6 | Offset:   25 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   25 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     10 | Offset:   25 | Instruction: SUB                 | Abc  |    5,    1, -256 | R(5) := R(1) - K(0) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     11 | Offset:   25 | Instruction: CALL                | Abc  |    0,    1,    4 | R(0)(#R(1)), base 4 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null]
Call Frame: CallFrame { return_pc: 11, base: 35, max_reg: 10, result_reg: 29 }
Moving arg 1 a.k.a. R(30) to R(36)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }, CallFrame { return_pc: 13, base: 25, max_reg: 10, result_reg: 22 }, CallFrame { return_pc: 11, base: 35, max_reg: 10, result_reg: 29 }]
PC:      6 | Offset:   35 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Null, Int(1), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   35 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      8 | Offset:   35 | Instruction: MOVE                | Abc  |    0,    1,    0 | R(0) := R(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      9 | Offset:   35 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Int(1), Null, Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:     12 | Offset:   25 | Instruction: SUB                 | Abc  |    8,    1, -255 | R(8) := R(1) - K(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Null, Null]
PC:     13 | Offset:   25 | Instruction: CALL                | Abc  |    0,    1,    7 | R(0)(#R(1)), base 7 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null]
Call Frame: CallFrame { return_pc: 13, base: 35, max_reg: 10, result_reg: 32 }
Moving arg 1 a.k.a. R(33) to R(36)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 11, base: 15, max_reg: 10, result_reg: 9 }, CallFrame { return_pc: 13, base: 25, max_reg: 10, result_reg: 22 }, CallFrame { return_pc: 13, base: 35, max_reg: 10, result_reg: 32 }]
PC:      6 | Offset:   35 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Null, Int(0), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   35 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Null, Int(0), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      8 | Offset:   35 | Instruction: MOVE                | Abc  |    0,    1,    0 | R(0) := R(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Null, Int(0), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      9 | Offset:   35 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Int(0), Null, Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:     14 | Offset:   25 | Instruction: ADD                 | Abc  |    3,    4,    7 | R(3) := R(4) + R(7) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Int(0), Int(0), Null]
PC:     15 | Offset:   25 | Instruction: MOVE                | Abc  |    0,    3,    0 | R(0) := R(3) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Null, Int(2), Null, Int(1), Int(1), Int(1), Null, Int(0), Int(0), Null]
PC:     16 | Offset:   25 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Null, Int(2), Null, Int(1), Int(2), Null, Null, Int(1), Int(1), Null, Int(0), Int(0), Null]
PC:     14 | Offset:   15 | Instruction: ADD                 | Abc  |    3,    4,    7 | R(3) := R(4) + R(7) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Bool(false), Int(2), Int(3), Null, Int(1), Int(2), Null]
PC:     15 | Offset:   15 | Instruction: MOVE                | Abc  |    0,    3,    0 | R(0) := R(3) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Null, Int(4), Null, Int(3), Int(2), Int(3), Null, Int(1), Int(2), Null]
PC:     16 | Offset:   15 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Null, Int(4), Null, Null, Null, Null, Int(3), Int(4), Null, Null, Int(2), Int(3), Null, Int(1), Int(2), Null]
PC:     12 | Offset:    5 | Instruction: SUB                 | Abc  |    8,    1, -255 | R(8) := R(1) - K(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Null, Null]
PC:     13 | Offset:    5 | Instruction: CALL                | Abc  |    0,    1,    7 | R(0)(#R(1)), base 7 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null]
Call Frame: CallFrame { return_pc: 13, base: 15, max_reg: 10, result_reg: 12 }
Moving arg 1 a.k.a. R(13) to R(16)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 13, base: 15, max_reg: 10, result_reg: 12 }]
PC:      6 | Offset:   15 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   15 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     10 | Offset:   15 | Instruction: SUB                 | Abc  |    5,    1, -256 | R(5) := R(1) - K(0) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     11 | Offset:   15 | Instruction: CALL                | Abc  |    0,    1,    4 | R(0)(#R(1)), base 4 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null]
Call Frame: CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }
Moving arg 1 a.k.a. R(20) to R(26)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 13, base: 15, max_reg: 10, result_reg: 12 }, CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }]
PC:      6 | Offset:   25 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   25 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     10 | Offset:   25 | Instruction: SUB                 | Abc  |    5,    1, -256 | R(5) := R(1) - K(0) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Null, Null, Null, Null, Null]
PC:     11 | Offset:   25 | Instruction: CALL                | Abc  |    0,    1,    4 | R(0)(#R(1)), base 4 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null]
Call Frame: CallFrame { return_pc: 11, base: 35, max_reg: 10, result_reg: 29 }
Moving arg 1 a.k.a. R(30) to R(36)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 13, base: 15, max_reg: 10, result_reg: 12 }, CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }, CallFrame { return_pc: 11, base: 35, max_reg: 10, result_reg: 29 }]
PC:      6 | Offset:   35 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Null, Int(1), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   35 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      8 | Offset:   35 | Instruction: MOVE                | Abc  |    0,    1,    0 | R(0) := R(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      9 | Offset:   35 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Null, Int(1), Null, Null, Null, Null, Int(1), Null, Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:     12 | Offset:   25 | Instruction: SUB                 | Abc  |    8,    1, -255 | R(8) := R(1) - K(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Null, Null]
PC:     13 | Offset:   25 | Instruction: CALL                | Abc  |    0,    1,    7 | R(0)(#R(1)), base 7 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null]
Call Frame: CallFrame { return_pc: 13, base: 35, max_reg: 10, result_reg: 32 }
Moving arg 1 a.k.a. R(33) to R(36)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 13, base: 15, max_reg: 10, result_reg: 12 }, CallFrame { return_pc: 11, base: 25, max_reg: 10, result_reg: 19 }, CallFrame { return_pc: 13, base: 35, max_reg: 10, result_reg: 32 }]
PC:      6 | Offset:   35 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Null, Int(0), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   35 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Null, Int(0), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      8 | Offset:   35 | Instruction: MOVE                | Abc  |    0,    1,    0 | R(0) := R(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Null, Int(0), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      9 | Offset:   35 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Null, Int(0), Null, Int(0), Null, Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:     14 | Offset:   25 | Instruction: ADD                 | Abc  |    3,    4,    7 | R(3) := R(4) + R(7) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Bool(false), Int(1), Int(1), Null, Int(0), Int(0), Null]
PC:     15 | Offset:   25 | Instruction: MOVE                | Abc  |    0,    3,    0 | R(0) := R(3) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Null, Int(2), Null, Int(1), Int(1), Int(1), Null, Int(0), Int(0), Null]
PC:     16 | Offset:   25 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Null, Int(2), Null, Null, Null, Null, Int(1), Int(2), Null, Null, Int(1), Int(1), Null, Int(0), Int(0), Null]
PC:     12 | Offset:   15 | Instruction: SUB                 | Abc  |    8,    1, -255 | R(8) := R(1) - K(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Null, Null]
PC:     13 | Offset:   15 | Instruction: CALL                | Abc  |    0,    1,    7 | R(0)(#R(1)), base 7 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null]
Call Frame: CallFrame { return_pc: 13, base: 25, max_reg: 10, result_reg: 22 }
Moving arg 1 a.k.a. R(23) to R(26)
[CallFrame { return_pc: 1, base: 5, max_reg: 10, result_reg: 0 }, CallFrame { return_pc: 13, base: 15, max_reg: 10, result_reg: 12 }, CallFrame { return_pc: 13, base: 25, max_reg: 10, result_reg: 22 }]
PC:      6 | Offset:   25 | Instruction: LE                  | Abc  |    3,    1, -256 | R(3) = (R(1) <= K(0)) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null, Null, Int(1), Null, Null, Null, Null, Null, Null, Null, Null]
PC:      7 | Offset:   25 | Instruction: JUMP_IF_FALSE       | AsBx |    3,          2 | if R(3) is false then pc += 2 | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      8 | Offset:   25 | Instruction: MOVE                | Abc  |    0,    1,    0 | R(0) := R(1) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null, Null, Int(1), Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:      9 | Offset:   25 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Null, Int(1), Null, Int(1), Null, Null, Bool(true), Null, Null, Null, Null, Null, Null]
PC:     14 | Offset:   15 | Instruction: ADD                 | Abc  |    3,    4,    7 | R(3) := R(4) + R(7) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Bool(false), Int(1), Int(2), Null, Int(1), Int(1), Null]
PC:     15 | Offset:   15 | Instruction: MOVE                | Abc  |    0,    3,    0 | R(0) := R(3) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Null, Int(3), Null, Int(2), Int(1), Int(2), Null, Int(1), Int(1), Null]
PC:     16 | Offset:   15 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Null, Int(3), Null, Int(2), Int(3), Null, Null, Int(1), Int(2), Null, Int(1), Int(1), Null]
PC:     14 | Offset:    5 | Instruction: ADD                 | Abc  |    3,    4,    7 | R(3) := R(4) + R(7) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Bool(false), Int(3), Int(4), Null, Int(2), Int(3), Null]
PC:     15 | Offset:    5 | Instruction: MOVE                | Abc  |    0,    3,    0 | R(0) := R(3) | Registers: [Null, Int(5), Null, Null, Null, Null, Int(5), Null, Int(5), Int(3), Int(4), Null, Int(2), Int(3), Null]
PC:     16 | Offset:    5 | Instruction: RETURN              | Abc  |    0,    0,    0 | return | Registers: [Null, Int(5), Null, Null, Null, Int(5), Int(5), Null, Null, Int(3), Int(4), Null, Int(2), Int(3), Null]
PC:      2 | Offset:    0 | Instruction: CLONE               | Abc  |    4,    0,    0 | R(4) := R(0).clone() | Registers: [Int(5), Int(5), Null, Null, Null]
PC:      3 | Offset:    0 | Instruction: NATIVE_CALL         | Abc  |    0,    1,    3 | R(0)(#R(1)), base 3, NATIVE: println | Registers: [Int(5), Int(5), Null, Null, Int(5)]
5
PC:      4 | Offset:    0 | Instruction: EXIT                | Abc  |    0,    0,    0 | std::process::exit(0) | Registers: [Int(5), Int(5), Null, Null, Int(5)]
