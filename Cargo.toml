[workspace]
resolver = "2"

members = [
    # ============================== Binaries ==============================

    # Quiklang executor (QVM, loader, invokes quiklangc if needed, etc.)
    "src/bin/quiklang",
    # Quiklang compiler (compiler, like rustc, but for quiklang)
    "src/bin/quiklangc",
    # Quiklang Developer Tools (qldev)
    "src/bin/qldev",
    # Quiklang to binary converter
    "src/bin/quiklang-to-bin",

    # ============================== Compiler ==============================

    # == Frontend ==

    # Lexer (Converts source code to tokens)
    "src/lib/frontend/lexer",
    # Parser (Converts tokens to AST)
    "src/lib/frontend/parser",
    # Semantic Checker (Simple type checker)
    "src/lib/frontend/semantic-checker",

    # == HIR (High-level Intermediate Representation) ==

    # HIR Builder (Converts AST to HIR)
    "src/lib/hir/hir-builder",
    # HIR Visitor (Visits HIR)
    "src/lib/hir/hir-visitor",
    # HIR Typer (Type checks HIR)
    "src/lib/hir/hir-typer",
    # HIR Typer Visitor (Visits HIR Typer)
    "src/lib/hir/hir-typer-visitor",

    # == QIR (Quiklang Intermediate Representation) ==

    # QIR Builder (Converts HIR to QIR)
    "src/lib/qir/qir-builder",
    # QIR Optimizer (Optimizes QIR)
    "src/lib/qir/qir-optimizer",

    # == Backend ==

    # QVM Codegen (Converts QIR to QVM bytecode)
    "src/lib/backend/qvm-codegen",
    # # Custom backend codegen (Converts QIR to custom backend code), most likely via a dll or so
    # "src/lib/backend/custom-backend-codegen",

    # ============================== QVM ==============================

    # QVM (Quiklang Virtual Machine)
    "src/lib/qvm",

    # ============================== Utils ==============================

    # General Utils (General utilities)
    "src/lib/utils",
    # Build Utils (Utilities for building)
    "src/lib/build-utils", 
    
    # ============================== Common ==============================

    # Common (Common utilities like data structures, errors, etc.)
    "src/lib/common",
]

[workspace.dependencies]
# ============================== Workspace Libraries ==============================

# == Frontend ==
quiklang-frontend-lexer = { path = "src/lib/frontend/lexer" }
quiklang-frontend-parser = { path = "src/lib/frontend/parser" }
quiklang-frontend-semantic-checker = { path = "src/lib/frontend/semantic-checker" }

# == HIR ==
quiklang-hir-hir-builder = { path = "src/lib/hir/hir-builder" }
quiklang-hir-hir-visitor = { path = "src/lib/hir/hir-visitor" }
quiklang-hir-hir-typer = { path = "src/lib/hir/hir-typer" }
quiklang-hir-hir-typer-visitor = { path = "src/lib/hir/hir-typer-visitor" }

# == QIR ==
quiklang-qir-qir-builder = { path = "src/lib/qir/qir-builder" }
quiklang-qir-qir-optimizer = { path = "src/lib/qir/qir-optimizer" }

# == Backend ==
quiklang-backend-qvm-codegen = { path = "src/lib/backend/qvm-codegen" }
# quiklang-backend-custom-backend-codegen = { path = "src/lib/backend/custom-backend-codegen" }

# == QVM ==
quiklang-qvm = { path = "src/lib/qvm" }

# == Utils ==
quiklang-utils = { path = "src/lib/utils" }
quiklang-build-utils = { path = "src/lib/build-utils" }

# == Common ==
quiklang-common = { path = "src/lib/common" }

# ============================== External Libraries ==============================

# Bytecode manipulation
byteorder = "1.5.0"

# CLI
colored = "2.1.0"
dialoguer = "0.11.0"
rustyline = "9.0.0"

# Lazy static
lazy_static = "1.5.0"

# FFI for QVM QFFI
libloading = "0.8.5"

# Error handling
thiserror = "1.0.64"

# Async
tokio = { version = "1.40.0", features = ["full"] }

[profile.release]
lto = "fat"
codegen-units = 1
panic = "abort"
strip = "symbols"
opt-level = 3
