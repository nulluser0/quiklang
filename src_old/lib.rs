//! # Quiklang
//!
//! A fast, simple, strongly-typed, and easy-to-use programming language.
//!
//! Quiklang is an universal programming language that is designed to be fast, simple, and easy to use.
//!
//! This file contains the main library module for the Quiklang project.
//!
//! The `lib.rs` file serves as the entry point for the library and defines the various modules
//! that make up the Quiklang project.
//!
//! ## Modules
//!
//! **Compiler Modules:**
//!
//! The compiler modules are responsible for compiling the Quiklang source code into bytecode.
//! There are three main compiler modules:
//!
//! | Module                                 | Description                                 |
//! |----------------------------------------|---------------------------------------------|
//! | [`frontend`](./frontend/index.html)    | Module for the frontend functionality. This module parses source code, and also is where linting and checks happen. |
//! | [`ir`](./ir/index.html)                | Module for the Intermediate Representation. Also known as the `middle`. This module is where the AST is converted into a format which is easier to optimize and work with. Many optimisations are done here. |
//! | [`backend`](./backend/index.html)      | Module for the backend functionality. This module is where the IR is converted into any target language. This format can include bytecode, machinecode, or any other format. |
//!
//! ---
//!
//! **Virtual Machine Modules:**
//!
//! The virtual machine modules are responsible for executing the bytecode generated by the compiler.
//! The QVM module is the main module for the virtual machine:
//!
//! | Module                                 | Description                                 |
//! |----------------------------------------|---------------------------------------------|
//! | [`qvm`](./qvm/index.html)              | Module for the Quiklang Virtual Machine (QVM) and its components. This module is responsible for executing the bytecode generated by the compiler. |
//!
//! ---
//!
//! **Errors:**
//!
//! The errors module contains the error handling and error types for the Quiklang project:
//!
//! | Module                                 | Description                                 |
//! |----------------------------------------|---------------------------------------------|
//! | [`errors`](./errors/index.html)        | Module for error handling and error types. This module contains the error types and error handling functions for the Quiklang project. |
//!
//! ---
//!
//! **Utilities:**
//!
//! The utilities module contains utility functions and helper methods for the Quiklang project:
//!
//! | Module                                 | Description                                 |
//! |----------------------------------------|---------------------------------------------|
//! | [`utils`](./utils/index.html)          | Module for utility functions and helper methods. This module contains utility functions and helper methods for the Quiklang project. |
//!
//!
//! ---
//!
//! **List of modules in alphabetical order:**
//!
//! - [`backend`](./backend/index.html): Module for the backend functionality.
//! - [`errors`](./errors/index.html): Module for error handling and error types.
//! - [`frontend`](./frontend/index.html): Module for the frontend functionality.
//! - [`ir`](./ir/index.html): Module for the Intermediate Representation (IR).
//! - [`qvm`](./qvm/index.html): Module for the Quiklang Virtual Machine (QVM) and its components.
//! - [`utils`](./utils/index.html): Module for utility functions and helper methods.
//!
//! ## Binaries
//!
//! The Quiklang project builds the following binaries:
//!
//! - `quiklangc`: The Quiklang compiler. This binary is used to compile Quiklang source code into bytecode and has some useful compilation utilities.
//! - `quiklang`: The Quiklang interpreter. This binary is used to compile and execute the bytecode generated by the Quiklang compiler.
//! - `quiklang-to-bin`: The Quiklang to binary converter. This binary is used to convert Quiklang source code into a binary executable, using rustc.
pub mod errors;
pub mod frontend;
pub mod qvm;
pub mod utils;
