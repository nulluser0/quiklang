/* 
    Quiklang (QLang) (QL) files

    *.quik - QLang source code file
    *.qbce - QLang bytecode represented as 'asm'-like syntax, easily editable
    *.qbin - 
*/

/* 
    let x = 100;    // loadint r0 100
    y = x + 200;    // loadint r1 200
                    // add r2 r0 r1
    y               // halt
                    // r2 has results of var 'y' (300)
*/

struct name {
    key: string,
    foo: integer
}

enum name {
    key(a<string>),         // Enum(tuple)
    foo { bar: string },    // Enum(struct)
    huh,                    // Enum
}

type name {
    fn bruh(0) -> wjefoij;
}

/*   
    pub fn add_string(&mut self, index: u32, value: &str) {
        // Calculate the offset and length
        let offset = self.string_pool.len() as u32;
        let length = value.len() as u32;

        // Add the string to the pool
        self.string_pool.extend_from_slice(value.as_bytes());

        // Calculate padding to ensure 4-byte alignment
        let padding = (4 - (length % 4)) % 4;
        self.string_pool.extend(vec![0; padding as usize]);

        // Store the mapping (index, offset, length)
        self.string_mappings.push((index, offset, length));
    }
*/

/* 
    # Architecture of VMs:

    In a multithreaded instance:

    |> MultiThreadedVM
        |> Threads

    Threads are the same as a singlethreaded VM, having their own registers.
    Constants and strings from the string pool are shared however, especially since they are read only to begin with.
    Messages can be sent to each thread, managed by the MultiThreadedVM parent instance.
        Tx/Rx Mailbox system, address is by ThID (Thread ID) of thread, also managed by the MultiThreadedVM.
    
    In a singlethreaded instance:

    |> SingleThreadedVM

    Essentially like a thread in the MultiThreadedVM, but owns itself or smth idk.

    Note that the MultiThreadedVM can run as singlethreaded, but the SingleThreadedVM cannot run as multithreaded.

    ---

    # Idea:

    (Embeddible) QL Backend Process Manager (QLBPM)

    |> QLBPMState
        |> MultiThreadedVM (1)
            |> Threads
        |> MultiThreadedVM (2)
            |> Threads

    The QLBPM is a lightweight but extensive and embeddible container for multiple MultiThreadedVM instances.
    The QLBPM can be embedded into a developer's program itself, either via a rust library (since QL is written in rust), or via FFI of sorts.
    QLBPMState holds a Vec of MultiThreadedVM, and a HashMap which points to the index of the vec, holding a struct containing information.
    This allows for easy management of VMs, including creation, restarts, suspensions, and drops/terminations.
        Search the VM process if needed by its details, like name, etc.
        Once VM process found, or unless already retrieved, actions can be done to it.

    A permission and sandboxing system will also be present, as a key security measure. The QLBPMState manages permissions and cross-communications between the VMs.
    VMs cannot directly talk to each other. Instead, it is required that the VM process communicate via QLBPM APIs.
    The QLBPM can also be set to enforce specific permissions to the VMs, like system I/Os, File access, etc...

    QLBPM is particularly useful in cases where multiple processes must be run. For example, this could be for a program's extension system, allowing users to
    install extensions which add to their program's functionality.
    Games might be able to benefit from this too, since many instances might run concurrently, and would need to also be managed in an efficient way.

    QLBPM can be nested like so:
    |> QLBPM
        |> MultiThreadedVM
            |> Thread
                |> QLBPM
                    |> Threads...
    This could have some use cases, like multiple features or such running in a process.

    QLBPM V.S. Multiple MultiThreadedVMs V.S. One MultiThreadedVM managing multiple threads:

    QLBPM:
        Pros:
        - (Maybe?) Easy to implement.
        - An already setup system, which developers can use and maybe freely modify.
        - Managed VMs with very simple concept of creation, suspension, dropping/termination, etc...
        - Most likely to be the most performant since it is as native to the QLang system, and also has least abstractions (?).
        - Can be created even in QLang environments.
        Cons:
        - Could have limited FFI support (non-rust langs).
        - Best support would most likely only be on Rust.

    Multiple MultiThreadedVMs:
        Pros:
        - Much more freedom in how to manage the VMs.
        - Better FFI (non-rust lang) support than QLBPM.
        Cons:
        - Efficiency greatly depends on the MultiThreadedVMs manager, involving language, optimisations, and code factors.
        - Complex since developer must make their own manager.
        - Possibly higher abstractions than using QLBPM.

    One MultiThreadedVM managing multiple threads
        Pros:
        - Able to manage the different processes in QLang, which could be easier especially if the program is written entirely in QLang.
        Cons:
        - Never going to be as performant as the options above (QLBPM or Multiple MultiThreadedVMs).
        - Highest abstractions compared to the other options.
        - Complexity in implementation of process management.
        - Kind of a stupid idea to be using this method when QLang gives you the option to create a QLBPM (unless the option does not exist).

    Use QLBPM if:
        - You want performant and an easy way to manage multiple process in QLang.
        - Easier to embed
        - Simple Rust integration via cargo
        - Least abstraction

    Do not use QLBPM if:
        - You want to manage multiple threads that do not need the user to, for example, create delete suspend processes/threads.
            - QLBPM would have more abstractions for VMs to talk to each other, compared to threads.
            - 

*/