/* 
    Quiklang (QLang) (QL) files

    *.quik - QLang source code file
    *.qbce - QLang bytecode represented as 'asm'-like syntax, easily editable
    *.qbin - 
*/

/* 
    let x = 100;    // loadint r0 100
    y = x + 200;    // loadint r1 200
                    // add r2 r0 r1
    y               // halt
                    // r2 has results of var 'y' (300)
*/

struct name {
    key: string,
    foo: integer
}

enum name {
    key(a<string>),         // Enum(tuple)
    foo { bar: string },    // Enum(struct)
    huh,                    // Enum
}

type name {
    fn bruh(0) -> wjefoij;
}

/*   
    pub fn add_string(&mut self, index: u32, value: &str) {
        // Calculate the offset and length
        let offset = self.string_pool.len() as u32;
        let length = value.len() as u32;

        // Add the string to the pool
        self.string_pool.extend_from_slice(value.as_bytes());

        // Calculate padding to ensure 4-byte alignment
        let padding = (4 - (length % 4)) % 4;
        self.string_pool.extend(vec![0; padding as usize]);

        // Store the mapping (index, offset, length)
        self.string_mappings.push((index, offset, length));
    }
*/